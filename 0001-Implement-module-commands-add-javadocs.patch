From bdfff68559f332d27e3907ea4600c1b2a57993c6 Mon Sep 17 00:00:00 2001
From: Charlie Joseph <ch@rli.es>
Date: Mon, 27 Mar 2023 15:06:28 +0100
Subject: [PATCH] Implement module commands + add javadocs

---
 .../net/analyse/plugin/AnalysePlugin.java     |  25 ++-
 .../plugin/command/AnalyseCommand.java        |  79 +++++++---
 .../analyse/plugin/command/SubCommand.java    |  30 ----
 .../plugin/command/sub/DebugCommand.java      |  39 ++---
 .../plugin/command/sub/HelpCommand.java       |  94 +++++++++++
 .../plugin/command/sub/SetupCommand.java      |  74 ++++-----
 .../plugin/command/sub/StatsCommand.java      |  87 ----------
 .../plugin/event/PlayerJoinListener.java      |  17 +-
 .../plugin/event/PlayerQuitListener.java      |   7 +
 .../plugin/event/ServerLoadListener.java      |   9 ++
 .../plugin/manager/CommandManager.java        |  92 ++++++++---
 .../plugin/manager/HeartbeatManager.java      |  13 ++
 bukkit/src/main/resources/plugin.yml          |   3 +
 .../main/java/net/analyse/sdk/Analyse.java    |   3 +
 sdk/src/main/java/net/analyse/sdk/SDK.java    |   8 +
 .../exception/ServerNotFoundException.java    |   3 +
 .../exception/ServerNotSetupException.java    |   3 +
 .../net/analyse/sdk/module/ModuleManager.java | 148 +++++++++---------
 .../net/analyse/sdk/obj/AnalysePlayer.java    |   3 +
 .../java/net/analyse/sdk/obj/PlayerEvent.java |  55 +++++++
 .../net/analyse/sdk/obj/PlayerStatistic.java  |  28 +++-
 .../net/analyse/sdk/platform/Platform.java    |   4 +-
 .../analyse/sdk/platform/PlatformConfig.java  |   3 +
 .../analyse/sdk/platform/PlatformModule.java  |  81 +++++++++-
 .../sdk/platform/PlatformTelemetry.java       |  13 ++
 .../analyse/sdk/platform/PlatformType.java    |   3 +
 .../net/analyse/sdk/platform/PlayerType.java  |   3 +
 .../sdk/platform/command/PlatformCommand.java |  53 +++++++
 .../command/PlatformCommandContext.java       |  35 +++++
 .../analyse/sdk/request/AnalyseRequest.java   |  37 +++++
 .../request/exception/AnalyseException.java   |  13 --
 .../request/response/PluginInformation.java   |   3 +
 .../request/response/ServerInformation.java   |   3 +
 .../java/net/analyse/sdk/util/MapperUtil.java |   5 +
 .../net/analyse/sdk/util/ResourceUtil.java    |   3 +
 .../java/net/analyse/sdk/util/StringUtil.java |  10 ++
 .../net/analyse/sdk/util/VersionUtil.java     |   4 +
 37 files changed, 774 insertions(+), 319 deletions(-)
 delete mode 100644 bukkit/src/main/java/net/analyse/plugin/command/SubCommand.java
 create mode 100644 bukkit/src/main/java/net/analyse/plugin/command/sub/HelpCommand.java
 delete mode 100644 bukkit/src/main/java/net/analyse/plugin/command/sub/StatsCommand.java
 create mode 100644 sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommand.java
 create mode 100644 sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommandContext.java
 delete mode 100644 sdk/src/main/java/net/analyse/sdk/request/exception/AnalyseException.java

diff --git a/bukkit/src/main/java/net/analyse/plugin/AnalysePlugin.java b/bukkit/src/main/java/net/analyse/plugin/AnalysePlugin.java
index 744937f..bde97da 100644
--- a/bukkit/src/main/java/net/analyse/plugin/AnalysePlugin.java
+++ b/bukkit/src/main/java/net/analyse/plugin/AnalysePlugin.java
@@ -30,6 +30,9 @@ import java.util.logging.Level;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+/**
+ * The Bukkit platform.
+ */
 public final class AnalysePlugin extends JavaPlugin implements Platform {
     private SDK sdk;
     private PlatformConfig config;
@@ -37,10 +40,14 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
     private boolean setup;
     private HeartbeatManager heartbeatManager;
     private ModuleManager moduleManager;
+    private CommandManager commandManager;
 
+    /**
+     * Starts the Bukkit platform.
+     */
     @Override
     public void onEnable() {
-        // initialise SDK.
+        // Initialise SDK.
         Analyse.init(this);
 
         try {
@@ -54,12 +61,12 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
 
         players = new TCustomHashMap<>(new IdentityHashingStrategy<>());
 
-        // Initialise managers.
+        // Initialise heartbeat manager.
         heartbeatManager = new HeartbeatManager(this);
-        new CommandManager(this).register();
 
         sdk = new SDK(this, config.getServerToken());
 
+        // Check if the server has been set up.
         if (config.getServerToken() != null && !config.getServerToken().isEmpty()) {
             sdk.getServerInformation().thenAccept(serverInformation -> {
                 log("Connected to '" + serverInformation.getName() + "'.");
@@ -88,7 +95,7 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
         debug("Debug mode enabled. Type 'analyse debug' to disable.");
         debug("Telemetry: " + getTelemetry());
 
-
+        // Check for updates.
         sdk.getPluginVersion(getType()).thenAccept(pluginInformation -> {
             if (VersionUtil.isNewerVersion(getVersion(), pluginInformation.getVersionName())) {
                 log(Level.WARNING, String.format("New version available (v%s). You are currently running v%s.", pluginInformation.getVersionName(), getDescription().getVersion()));
@@ -109,12 +116,16 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
             return null;
         });
 
+        // Load modules.
         try {
             Class.forName("org.bukkit.event.server.ServerLoadEvent");
             registerEvents(new ServerLoadListener(this));
         } catch (final ClassNotFoundException ignored) {
             Bukkit.getScheduler().runTaskLater(this, this::loadModules, 1);
         }
+
+        // Register command manager after modules are finished loading (or failed to load).
+        commandManager.register();
     }
 
     @Override
@@ -155,6 +166,7 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
             PlatformModule module = iterator.next();
             unloadModule(module);
             iterator.remove();
+            commandManager.unregisterCommands(module.getName());
         }
     }
 
@@ -164,6 +176,7 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
             HandlerList.unregisterAll((Listener) module);
         }
         moduleManager.unregister(module);
+        commandManager.unregisterCommands(module.getName());
     }
 
     /**
@@ -267,4 +280,8 @@ public final class AnalysePlugin extends JavaPlugin implements Platform {
     public ModuleManager getModuleManager() {
         return moduleManager;
     }
+
+    public CommandManager getCommandManager() {
+        return commandManager;
+    }
 }
diff --git a/bukkit/src/main/java/net/analyse/plugin/command/AnalyseCommand.java b/bukkit/src/main/java/net/analyse/plugin/command/AnalyseCommand.java
index 9827965..75f68e6 100644
--- a/bukkit/src/main/java/net/analyse/plugin/command/AnalyseCommand.java
+++ b/bukkit/src/main/java/net/analyse/plugin/command/AnalyseCommand.java
@@ -2,55 +2,84 @@ package net.analyse.plugin.command;
 
 import com.google.common.collect.ImmutableList;
 import net.analyse.plugin.manager.CommandManager;
+import net.analyse.sdk.platform.command.PlatformCommand;
+import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.TabExecutor;
+import org.jetbrains.annotations.NotNull;
 
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.stream.Collectors;
 
 public class AnalyseCommand implements TabExecutor {
-    private CommandManager commandManager;
+    private final CommandManager commandManager;
 
+    /**
+     * Constructor for the AnalyseCommand class
+     * @param commandManager The command manager
+     */
     public AnalyseCommand(CommandManager commandManager) {
         this.commandManager = commandManager;
     }
 
+    /**
+     * Called when a player executes a command
+     * @param sender Source of the command
+     * @param command Command which was executed
+     * @param label Alias of the command which was used
+     * @param args Passed command arguments
+     * @return true if a valid command, otherwise false
+     */
     @Override
-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
-        if(args.length == 0) {
-            sender.sendMessage("§8[Analyse] §7Plugin information.");
+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+        if (!sender.hasPermission("analyse.admin")) {
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7You do not have access to that command."));
             return true;
         }
 
-        Map<String, SubCommand> commands = commandManager.getCommands();
-        if(! commands.containsKey(args[0].toLowerCase())) {
-            sender.sendMessage("§8[Analyse] §7Unknown command.");
+        if (args.length == 0) {
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7Plugin information:"));
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format(" &b- &7Version: &bv%s&7.", commandManager.getPlatform().getDescription().getVersion())));
             return true;
         }
 
-        final SubCommand subCommand = commands.get(args[0].toLowerCase());
-        if (! sender.hasPermission(subCommand.getPermission())) {
-            sender.sendMessage("§b[Analyse] §7You do not have access to that command.");
+        Map<String, Map<String, PlatformCommand>> commandsByModule = commandManager.getCommandsByModule();
+        Optional<PlatformCommand> subCommand = commandsByModule.values().stream()
+                .flatMap(commandsMap -> commandsMap.values().stream())
+                .filter(cmd -> cmd.getName().equalsIgnoreCase(args[0]))
+                .findFirst();
+
+        if (!subCommand.isPresent()) {
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8[Analyse] &7Unknown sub command: &b%s&7.", args[0].toLowerCase())));
+            return true;
+        }
+
+        if (!sender.hasPermission("analyse." + subCommand.get().getName())) {
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7You do not have access to that command."));
             return true;
         }
 
-        subCommand.execute(sender, Arrays.copyOfRange(args, 1, args.length));
+        subCommand.get().execute(sender, Arrays.copyOfRange(args, 1, args.length));
         return true;
     }
 
+    /**
+     * Called when a player tab-completes a command
+     * @param sender CommandSender which represents the player
+     * @param command Command which was executed
+     * @param label Alias of the command which was used
+     * @param args The arguments passed to the command, including final
+     *     partial argument to be completed
+     * @return A List of possible completions for the final argument, or none
+     */
     @Override
-    public List<String> onTabComplete(CommandSender sender, Command command, String label, String[] args) {
-        if(args.length == 1) {
-            return commandManager.getCommands()
-                    .keySet()
-                    .stream()
-                    .filter(s -> s.startsWith(args[0]))
-                    .collect(Collectors.toList());
-        }
-
-        return ImmutableList.of();
+    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, String[] args) {
+        return args.length == 1 ?
+                commandManager.getCommandsByModule().values().stream()
+                        .flatMap(commandsMap -> commandsMap.keySet().stream())
+                        .filter(s -> s.startsWith(args[0]))
+                        .collect(Collectors.toList()) :
+                ImmutableList.of();
     }
-}
+}
\ No newline at end of file
diff --git a/bukkit/src/main/java/net/analyse/plugin/command/SubCommand.java b/bukkit/src/main/java/net/analyse/plugin/command/SubCommand.java
deleted file mode 100644
index 432b809..0000000
--- a/bukkit/src/main/java/net/analyse/plugin/command/SubCommand.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package net.analyse.plugin.command;
-
-import net.analyse.plugin.AnalysePlugin;
-import org.bukkit.command.CommandSender;
-
-public abstract class SubCommand {
-    private final AnalysePlugin platform;
-    private final String name;
-    private final String permission;
-
-    public SubCommand(AnalysePlugin platform, String name, String permission) {
-        this.platform = platform;
-        this.name = name;
-        this.permission = permission;
-    }
-
-    public abstract void execute(final CommandSender sender, final String[] args);
-
-    public AnalysePlugin getPlatform() {
-        return platform;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public String getPermission() {
-        return permission;
-    }
-}
diff --git a/bukkit/src/main/java/net/analyse/plugin/command/sub/DebugCommand.java b/bukkit/src/main/java/net/analyse/plugin/command/sub/DebugCommand.java
index 88e692e..5100652 100644
--- a/bukkit/src/main/java/net/analyse/plugin/command/sub/DebugCommand.java
+++ b/bukkit/src/main/java/net/analyse/plugin/command/sub/DebugCommand.java
@@ -2,34 +2,35 @@ package net.analyse.plugin.command.sub;
 
 import dev.dejvokep.boostedyaml.YamlDocument;
 import net.analyse.plugin.AnalysePlugin;
-import net.analyse.plugin.command.SubCommand;
 import net.analyse.sdk.platform.PlatformConfig;
+import net.analyse.sdk.platform.command.PlatformCommand;
+import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 
 import java.io.IOException;
 
-public class DebugCommand extends SubCommand {
+public class DebugCommand extends PlatformCommand {
+
     public DebugCommand(AnalysePlugin platform) {
-        super(platform, "debug", "analyse.admin");
-    }
+        super("debug", "Toggles Analyses plugin-wide debug mode.", commandContext -> {
+            CommandSender sender = (CommandSender) commandContext.getSender();
+            String[] args = commandContext.getArguments();
 
-    @Override
-    public void execute(CommandSender sender, String[] args) {
-        AnalysePlugin platform = getPlatform();
-        PlatformConfig analyseConfig = platform.getPlatformConfig();
+            PlatformConfig analyseConfig = platform.getPlatformConfig();
 
-        boolean debugEnabled = args.length > 0 ? Boolean.parseBoolean(args[0]) : !analyseConfig.isDebugEnabled();
+            boolean debugEnabled = args.length > 0 ? Boolean.parseBoolean(args[0]) : !analyseConfig.isDebugEnabled();
 
-        sender.sendMessage("§8[Analyse] §7Debug Mode: §f" + (debugEnabled ? "Enabled" : "Disabled") + "§7.");
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8[Analyse] &7Debug Mode: &f%s&7.", debugEnabled ? "Enabled" : "Disabled")));
 
-        YamlDocument configFile = analyseConfig.getYamlDocument();
-        configFile.set("debug", debugEnabled);
-        analyseConfig.setDebugEnabled(debugEnabled);
+            YamlDocument configFile = analyseConfig.getYamlDocument();
+            configFile.set("debug", debugEnabled);
+            analyseConfig.setDebugEnabled(debugEnabled);
 
-        try {
-            configFile.save();
-        } catch (IOException e) {
-            sender.sendMessage("§8[Analyse] §7Failed to save config: " + e.getMessage());
-        }
+            try {
+                configFile.save();
+            } catch (IOException e) {
+                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8[Analyse] &7Failed to save config: &f%s&7.", e.getMessage())));
+            }
+        });
     }
-}
+}
\ No newline at end of file
diff --git a/bukkit/src/main/java/net/analyse/plugin/command/sub/HelpCommand.java b/bukkit/src/main/java/net/analyse/plugin/command/sub/HelpCommand.java
new file mode 100644
index 0000000..83f28e3
--- /dev/null
+++ b/bukkit/src/main/java/net/analyse/plugin/command/sub/HelpCommand.java
@@ -0,0 +1,94 @@
+package net.analyse.plugin.command.sub;
+
+import net.analyse.plugin.AnalysePlugin;
+import net.analyse.sdk.platform.command.PlatformCommand;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
+
+import java.util.Comparator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+public class HelpCommand extends PlatformCommand {
+    private static final String COMMAND_NAME = "help";
+    private static final String COMMAND_DESCRIPTION = "Provides information about the plugin's sub-commands.";
+    private static final int COMMANDS_PER_PAGE = 10;
+
+    public HelpCommand(AnalysePlugin platform) {
+        super(COMMAND_NAME, COMMAND_DESCRIPTION, commandContext -> {
+            CommandSender sender = (CommandSender) commandContext.getSender();
+            String[] args = commandContext.getArguments();
+
+            // Sorts sub-commands by module name, with the Analyse built-in commands always at the top.
+            Map<String, Map<String, PlatformCommand>> commands = platform.getCommandManager().getCommandsByModule().entrySet().stream()
+                    .sorted(Comparator.comparing(entry -> {
+                        String key = entry.getKey();
+                        return key.equalsIgnoreCase("Analyse") ? "" : key;
+                    }, String.CASE_INSENSITIVE_ORDER))
+                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (v1, v2) -> v1, LinkedHashMap::new));
+
+            int currentPage;
+            int totalCommands = commands.values().stream().mapToInt(Map::size).sum();
+            int totalPages = (totalCommands + COMMANDS_PER_PAGE - 1) / COMMANDS_PER_PAGE;
+
+            if (args.length == 0) {
+                currentPage = 1;
+
+                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7Commands:"));
+                int i = 0;
+                for (Map<String, PlatformCommand> moduleCommands : commands.values()) {
+                    for (PlatformCommand command : moduleCommands.values()) {
+                        if (COMMANDS_PER_PAGE * (currentPage - 1) <= i) {
+                            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&7- &b%s &8- &7%s", command.getName(), command.getDescription())));
+                        }
+                        if (++i % COMMANDS_PER_PAGE == 0) {
+                            currentPage++;
+                            break;
+                        }
+                    }
+                    if (currentPage > totalPages) {
+                        break;
+                    }
+                }
+                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&7Page %d/%d. Use &b/analyse help (page)&7.", currentPage, totalPages)));
+                return;
+            }
+
+            try {
+                currentPage = Integer.parseInt(args[0]);
+                if (currentPage <= 0 || currentPage > totalPages) {
+                    throw new NumberFormatException();
+                }
+            } catch (NumberFormatException e) {
+                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7Invalid page number."));
+                return;
+            }
+
+            int startIndex = (currentPage - 1) * COMMANDS_PER_PAGE;
+            int endIndex = Math.min(startIndex + COMMANDS_PER_PAGE, totalCommands);
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7Commands:"));
+
+            int i = 0;
+            for (Map<String, PlatformCommand> moduleCommands : commands.values()) {
+                if (i >= endIndex) {
+                    break;
+                }
+
+                for (PlatformCommand command : moduleCommands.values()) {
+                    if (i >= startIndex) {
+                        String message = String.format("&7- &b%s &8- &7%s", command.getName(), command.getDescription());
+                        sender.sendMessage(ChatColor.translateAlternateColorCodes('&', message));
+                    }
+                    i++;
+
+                    if (i >= endIndex) {
+                        break;
+                    }
+                }
+            }
+
+            sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&7Page %d/%d. Use &b/analyse help (page)&7.", currentPage, totalPages)));
+        });
+    }
+}
\ No newline at end of file
diff --git a/bukkit/src/main/java/net/analyse/plugin/command/sub/SetupCommand.java b/bukkit/src/main/java/net/analyse/plugin/command/sub/SetupCommand.java
index 37285b9..18e1a6f 100644
--- a/bukkit/src/main/java/net/analyse/plugin/command/sub/SetupCommand.java
+++ b/bukkit/src/main/java/net/analyse/plugin/command/sub/SetupCommand.java
@@ -2,58 +2,60 @@ package net.analyse.plugin.command.sub;
 
 import dev.dejvokep.boostedyaml.YamlDocument;
 import net.analyse.plugin.AnalysePlugin;
-import net.analyse.plugin.command.SubCommand;
 import net.analyse.sdk.SDK;
-import net.analyse.sdk.platform.PlatformConfig;
 import net.analyse.sdk.exception.ServerNotFoundException;
+import net.analyse.sdk.platform.PlatformConfig;
+import net.analyse.sdk.platform.command.PlatformCommand;
+import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 
 import java.io.IOException;
 
-public class SetupCommand extends SubCommand {
+public class SetupCommand extends PlatformCommand {
+
     public SetupCommand(AnalysePlugin platform) {
-        super(platform, "setup", "analyse.setup");
-    }
+        super("setup", "Configure the server token key", commandContext -> {
+            CommandSender sender = (CommandSender) commandContext.getSender();
+            String[] args = commandContext.getArguments();
+
+            // Your command logic goes here
+            if (args.length == 0) {
+                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7Usage: /analyse setup <serverToken>"));
+                return;
+            }
 
-    @Override
-    public void execute(CommandSender sender, String[] args) {
-        if(args.length == 0) {
-            sender.sendMessage("§8[Analyse] §7Usage: /analyse setup <serverToken>");
-            return;
-        }
+            String serverToken = args[0];
 
-        String serverToken = args[0];
-        AnalysePlugin platform = getPlatform();
+            SDK analyse = platform.getSDK();
+            PlatformConfig analyseConfig = platform.getPlatformConfig();
+            YamlDocument configFile = analyseConfig.getYamlDocument();
 
-        SDK analyse = platform.getSDK();
-        PlatformConfig analyseConfig = platform.getPlatformConfig();
-        YamlDocument configFile = analyseConfig.getYamlDocument();
+            analyse.setServerToken(serverToken);
 
-        analyse.setServerToken(serverToken);
+            platform.getSDK().getServerInformation().whenComplete((information, throwable) -> {
+                if(throwable != null) {
+                    if(throwable.getCause() instanceof ServerNotFoundException) {
+                        sender.sendMessage(ChatColor.translateAlternateColorCodes('&', "&8[Analyse] &7Server not found. Please check your server token."));
+                        platform.getHeartbeatManager().stop();
+                        return;
+                    }
 
-        platform.getSDK().getServerInformation().whenComplete((information, throwable) -> {
-            if(throwable != null) {
-                if(throwable.getCause() instanceof ServerNotFoundException) {
-                    sender.sendMessage("§8[Analyse] §7Server not found. Please check your server token.");
-                    platform.getHeartbeatManager().stop();
+                    sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8[Analyse] &cAn error occurred: &f%s&c.", throwable.getMessage())));
                     return;
                 }
 
-                sender.sendMessage("§8[Analyse] §cAn error occurred: " + throwable.getMessage());
-                return;
-            }
-
-            analyseConfig.setServerToken(serverToken);
-            configFile.set("server.token", serverToken);
+                analyseConfig.setServerToken(serverToken);
+                configFile.set("server.token", serverToken);
 
-            try {
-                configFile.save();
-            } catch (IOException e) {
-                sender.sendMessage("§8[Analyse] §7Failed to save config: " + e.getMessage());
-            }
+                try {
+                    configFile.save();
+                } catch (IOException e) {
+                    sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8[Analyse] Failed to save config: %s", e.getMessage())));
+                }
 
-            sender.sendMessage("§8[Analyse] §7Connected to §b" + information.getName() + "§7.");
-            platform.configure();
+                sender.sendMessage(ChatColor.translateAlternateColorCodes('&', String.format("&8[Analyse] &7Connected to &b%s&7.", information.getName())));
+                platform.configure();
+            });
         });
     }
-}
+}
\ No newline at end of file
diff --git a/bukkit/src/main/java/net/analyse/plugin/command/sub/StatsCommand.java b/bukkit/src/main/java/net/analyse/plugin/command/sub/StatsCommand.java
deleted file mode 100644
index a3fcec1..0000000
--- a/bukkit/src/main/java/net/analyse/plugin/command/sub/StatsCommand.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package net.analyse.plugin.command.sub;
-
-import net.analyse.plugin.AnalysePlugin;
-import net.analyse.plugin.command.SubCommand;
-import net.analyse.sdk.obj.AnalysePlayer;
-import net.analyse.sdk.platform.PlayerType;
-import net.md_5.bungee.api.chat.HoverEvent;
-import net.md_5.bungee.api.chat.TextComponent;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-public class StatsCommand extends SubCommand {
-
-    public StatsCommand(AnalysePlugin platform) {
-        super(platform, "stats", "analyse.admin");
-    }
-
-    @Override
-    public void execute(CommandSender sender, String[] args) {
-
-        Collection<AnalysePlayer> players = getPlatform().getPlayers().values();
-
-        Stream<AnalysePlayer> javaStream = players.stream().filter(analysePlayer -> analysePlayer.getType() == PlayerType.JAVA);
-        Stream<AnalysePlayer> bedrockStream = players.stream().filter(analysePlayer -> analysePlayer.getType() == PlayerType.BEDROCK);
-
-        int javaCount = (int) javaStream.count();
-        int bedrockCount = (int) bedrockStream.count();
-        int totalCount = javaCount + bedrockCount;
-
-        sender.sendMessage("§b[Analyse] §7Domain Stats:");
-        sender.sendMessage("§7");
-
-        // Group by domain and show counts
-        Map<String, Map<PlayerType, Long>> domainCounts = players.stream()
-                .collect(Collectors.groupingBy(AnalysePlayer::getDomain,
-                        Collectors.groupingBy(AnalysePlayer::getType, Collectors.counting())));
-
-        Map<String, Long> domainTotals = domainCounts.entrySet().stream()
-                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().values().stream().mapToLong(Long::longValue).sum()));
-
-        Map<String, Map<PlayerType, Long>> topDomains = domainCounts.entrySet().stream()
-                .sorted(Comparator.comparingLong((Map.Entry<String, Map<PlayerType, Long>> e) -> e.getValue().getOrDefault(PlayerType.JAVA, 0L) + e.getValue().getOrDefault(PlayerType.BEDROCK, 0L)).reversed())
-                .limit(5)
-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (v1, v2) -> v1, LinkedHashMap::new));
-
-        if(topDomains.size() > 0) {
-            for (Map.Entry<String, Map<PlayerType, Long>> entry : topDomains.entrySet()) {
-                String domain = entry.getKey();
-                Map<PlayerType, Long> counts = entry.getValue();
-                long domainTotal = domainTotals.get(domain);
-                long javaDomainCount = counts.getOrDefault(PlayerType.JAVA, 0L);
-                long bedrockDomainCount = counts.getOrDefault(PlayerType.BEDROCK, 0L);
-
-                // Create a tooltip with the domain stats using chatcomponents
-                HoverEvent hoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, new net.md_5.bungee.api.chat.BaseComponent[] {
-                        new net.md_5.bungee.api.chat.TextComponent("§b" + domain + "\n"),
-
-                        new net.md_5.bungee.api.chat.TextComponent("\n§7⚡ §7Java: §f" + javaDomainCount),
-                        new net.md_5.bungee.api.chat.TextComponent("\n§7⚡ §7Bedrock: §f" + bedrockDomainCount),
-
-                        new net.md_5.bungee.api.chat.TextComponent("\n\n§7Click for more information"),
-                });
-
-                if(sender instanceof Player) {
-                    TextComponent component = new TextComponent("§7⚡ §b" + domain + ": §f" + domainTotal + " §7online §8§o(Hover for details)");
-                    component.setHoverEvent(hoverEvent);
-
-                    ((Player) sender).spigot().sendMessage(component);
-                }
-
-//                sender.sendMessage("§7⚡ §b" + domain + ": " + domainTotal + " §7online (§f" + javaDomainCount + " §7Java, §f" + bedrockDomainCount + " §7Bedrock)");
-            }
-        } else {
-            sender.sendMessage("§7⚡ §7No domains found.");
-        }
-
-        sender.sendMessage("§7");
-        sender.sendMessage("§b[Analyse] §7A total of " + totalCount + " players online.");
-    }
-}
diff --git a/bukkit/src/main/java/net/analyse/plugin/event/PlayerJoinListener.java b/bukkit/src/main/java/net/analyse/plugin/event/PlayerJoinListener.java
index 21121d8..61d0ae2 100644
--- a/bukkit/src/main/java/net/analyse/plugin/event/PlayerJoinListener.java
+++ b/bukkit/src/main/java/net/analyse/plugin/event/PlayerJoinListener.java
@@ -11,6 +11,9 @@ import org.bukkit.event.player.PlayerJoinEvent;
 
 import java.util.Date;
 
+/**
+ * Listens for player join events.
+ */
 public class PlayerJoinListener implements Listener {
     private final AnalysePlugin platform;
 
@@ -18,29 +21,35 @@ public class PlayerJoinListener implements Listener {
         this.platform = platform;
     }
 
+    /**
+     * Handles the player join event.
+     * @param event The event.
+     */
     @EventHandler(priority = EventPriority.LOWEST)
     public void onJoin(PlayerJoinEvent event) {
         Player bukkitPlayer = event.getPlayer();
-
         PlatformConfig analyseConfig = platform.getPlatformConfig();
-        if(analyseConfig.isPlayerExcluded(bukkitPlayer.getUniqueId())) {
+
+        // Check if the player is excluded from tracking.
+        if (analyseConfig.isPlayerExcluded(bukkitPlayer.getUniqueId())) {
             platform.debug("Skipped tracking " + bukkitPlayer.getName() + " as they are an excluded player.");
             return;
         }
 
+        // Create a new player object.
         AnalysePlayer player = new AnalysePlayer(
                 bukkitPlayer.getName(),
                 bukkitPlayer.getUniqueId(),
                 bukkitPlayer.getAddress() != null ? bukkitPlayer.getAddress().getAddress().getHostAddress() : null
         );
 
-        if(bukkitPlayer.getAddress() != null) {
+        if (bukkitPlayer.getAddress() != null) {
             player.setDomain(bukkitPlayer.getAddress().getHostName());
         }
 
         platform.debug("Tracking " + bukkitPlayer.getName() + " that connected via: " + player.getDomain());
 
-        if(analyseConfig.shouldUseServerFirstJoinedAt()) {
+        if (analyseConfig.shouldUseServerFirstJoinedAt()) {
             player.setFirstJoinedAt(new Date(bukkitPlayer.getFirstPlayed()));
         }
 
diff --git a/bukkit/src/main/java/net/analyse/plugin/event/PlayerQuitListener.java b/bukkit/src/main/java/net/analyse/plugin/event/PlayerQuitListener.java
index 9e1a643..33c96ee 100644
--- a/bukkit/src/main/java/net/analyse/plugin/event/PlayerQuitListener.java
+++ b/bukkit/src/main/java/net/analyse/plugin/event/PlayerQuitListener.java
@@ -11,6 +11,9 @@ import org.bukkit.event.player.PlayerQuitEvent;
 
 import java.util.logging.Level;
 
+/**
+ * Listens for player leave events.
+ */
 public class PlayerQuitListener implements Listener {
     private final AnalysePlugin platform;
 
@@ -18,6 +21,10 @@ public class PlayerQuitListener implements Listener {
         this.platform = platform;
     }
 
+    /**
+     * Handles the player leave event.
+     * @param event The event.
+     */
     @EventHandler
     public void onQuit(PlayerQuitEvent event) {
         Player bukkitPlayer = event.getPlayer();
diff --git a/bukkit/src/main/java/net/analyse/plugin/event/ServerLoadListener.java b/bukkit/src/main/java/net/analyse/plugin/event/ServerLoadListener.java
index 999e36e..766b880 100644
--- a/bukkit/src/main/java/net/analyse/plugin/event/ServerLoadListener.java
+++ b/bukkit/src/main/java/net/analyse/plugin/event/ServerLoadListener.java
@@ -6,6 +6,9 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.Listener;
 import org.bukkit.event.server.ServerLoadEvent;
 
+/**
+ * Listens for the server load event.
+ */
 public class ServerLoadListener implements Listener {
     private final AnalysePlugin platform;
 
@@ -13,9 +16,15 @@ public class ServerLoadListener implements Listener {
         this.platform = platform;
     }
 
+    /**
+     * Called when the server is loaded.
+     * @param event The event.
+     */
     @EventHandler
     public void onServerLoad(ServerLoadEvent event) {
         HandlerList.unregisterAll(this);
+
+        // Loads platform modules.
         platform.loadModules();
     }
 }
diff --git a/bukkit/src/main/java/net/analyse/plugin/manager/CommandManager.java b/bukkit/src/main/java/net/analyse/plugin/manager/CommandManager.java
index feb910e..337b865 100644
--- a/bukkit/src/main/java/net/analyse/plugin/manager/CommandManager.java
+++ b/bukkit/src/main/java/net/analyse/plugin/manager/CommandManager.java
@@ -1,37 +1,45 @@
 package net.analyse.plugin.manager;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Maps;
 import net.analyse.plugin.AnalysePlugin;
 import net.analyse.plugin.command.AnalyseCommand;
-import net.analyse.plugin.command.SubCommand;
 import net.analyse.plugin.command.sub.DebugCommand;
+import net.analyse.plugin.command.sub.HelpCommand;
 import net.analyse.plugin.command.sub.SetupCommand;
-import net.analyse.plugin.command.sub.StatsCommand;
+import net.analyse.sdk.platform.command.PlatformCommand;
 import org.bukkit.command.PluginCommand;
 
-import java.util.Map;
+import java.util.*;
 
+/**
+ * A manager that registers built-in as priority, and then registers platform sub-commands.
+ */
 public class CommandManager {
     private final AnalysePlugin platform;
-    private final Map<String, SubCommand> commands;
+    private final Map<String, Map<String, PlatformCommand>> commandsByModule = new LinkedHashMap<>();
 
+    /**
+     * Creates a new command manager.
+     * @param platform The platform.
+     */
     public CommandManager(AnalysePlugin platform) {
         this.platform = platform;
-        this.commands = Maps.newHashMap();
+
+        // Load built-in commands
+        registerCommands("Analyse", Arrays.asList(new HelpCommand(platform), new SetupCommand(platform), new DebugCommand(platform)));
     }
 
-    public void register() {
-        ImmutableList.of(
-                new SetupCommand(platform),
-                new DebugCommand(platform),
-                new StatsCommand(platform)
-//                new PlayerCommand(platform),
-//                new StatsCommand(platform)
-        ).forEach(command -> {
-            commands.put(command.getName(), command);
-        });
+    /**
+     * Gets the platform.
+     * @return The platform.
+     */
+    public AnalysePlugin getPlatform() {
+        return platform;
+    }
 
+    /**
+     * Registers the main command and tab completer.
+     */
+    public void register() {
         AnalyseCommand analyseCommand = new AnalyseCommand(this);
         PluginCommand pluginCommand = platform.getCommand("analyse");
 
@@ -43,7 +51,51 @@ public class CommandManager {
         pluginCommand.setTabCompleter(analyseCommand);
     }
 
-    public Map<String, SubCommand> getCommands() {
-        return commands;
+    /**
+     * Registers a module's commands.
+     * @param moduleName The name of the module.
+     * @param commands The commands to register.
+     */
+    public void registerCommands(String moduleName, List<PlatformCommand> commands) {
+        if (commandsByModule.containsKey(moduleName)) {
+            platform.getLogger().warning("A module with the name '" + moduleName + "' is already registered. Skipping...");
+            return;
+        }
+
+        Map<String, PlatformCommand> moduleCommands = new HashMap<>();
+        commands.forEach(platformCommand -> {
+            String commandName = platformCommand.getName();
+            if (commandsByModule.values().stream()
+                    .flatMap(commandsMap -> commandsMap.values().stream())
+                    .map(PlatformCommand::getName)
+                    .anyMatch(name -> name.equalsIgnoreCase(commandName))) {
+                platform.getLogger().warning("A command with the name '" + commandName + "' is already registered in another module. Skipping...");
+                return;
+            }
+
+            moduleCommands.put(commandName, platformCommand);
+        });
+
+        commandsByModule.put(moduleName, moduleCommands);
+    }
+
+    /**
+     * Unregisters a module's commands.
+     * @param moduleName The name of the module.
+     */
+    public void unregisterCommands(String moduleName) {
+        commandsByModule.remove(moduleName);
+
+        // Re-register the main command to update the tab completer
+        register();
+    }
+
+    /**
+     * Get a map of all registered commands grouped by module.
+     * @return A map of all registered commands grouped by module.
+     */
+    public Map<String, Map<String, PlatformCommand>> getCommandsByModule() {
+        return commandsByModule;
     }
-}
+
+}
\ No newline at end of file
diff --git a/bukkit/src/main/java/net/analyse/plugin/manager/HeartbeatManager.java b/bukkit/src/main/java/net/analyse/plugin/manager/HeartbeatManager.java
index 543c182..5fee8cd 100644
--- a/bukkit/src/main/java/net/analyse/plugin/manager/HeartbeatManager.java
+++ b/bukkit/src/main/java/net/analyse/plugin/manager/HeartbeatManager.java
@@ -8,14 +8,24 @@ import org.bukkit.scheduler.BukkitTask;
 
 import java.util.logging.Level;
 
+/**
+ * The heartbeat manager is responsible for sending a heartbeat to Analyse
+ */
 public class HeartbeatManager {
     private final AnalysePlugin platform;
     private BukkitTask task;
 
+    /**
+     * Create a new heartbeat manager.
+     * @param platform The platform.
+     */
     public HeartbeatManager(AnalysePlugin platform) {
         this.platform = platform;
     }
 
+    /**
+     * Start sending heartbeats.
+     */
     public void start() {
         task = platform.getServer().getScheduler().runTaskTimer(platform, () -> {
             int playerCount = Bukkit.getOnlinePlayers().size();
@@ -47,6 +57,9 @@ public class HeartbeatManager {
         }, 0, 20 * 60);
     }
 
+    /**
+     * Stop sending heartbeats.
+     */
     public void stop() {
         if (task == null) return;
         task.cancel();
diff --git a/bukkit/src/main/resources/plugin.yml b/bukkit/src/main/resources/plugin.yml
index 3f97bb1..9e97dd4 100644
--- a/bukkit/src/main/resources/plugin.yml
+++ b/bukkit/src/main/resources/plugin.yml
@@ -1,6 +1,9 @@
 name: Analyse
 version: '${version}'
 main: net.analyse.plugin.AnalysePlugin
+authors: [Analyse]
+description: The official Minecraft plugin for Analyse.
+website: https://analyse.net
 commands:
   analyse:
     description: The main command
\ No newline at end of file
diff --git a/sdk/src/main/java/net/analyse/sdk/Analyse.java b/sdk/src/main/java/net/analyse/sdk/Analyse.java
index ff1ec9e..163f9d6 100644
--- a/sdk/src/main/java/net/analyse/sdk/Analyse.java
+++ b/sdk/src/main/java/net/analyse/sdk/Analyse.java
@@ -2,6 +2,9 @@ package net.analyse.sdk;
 
 import net.analyse.sdk.platform.Platform;
 
+/**
+ * Entry point for the Analyse SDK.
+ */
 public class Analyse {
     private static Platform platform;
 
diff --git a/sdk/src/main/java/net/analyse/sdk/SDK.java b/sdk/src/main/java/net/analyse/sdk/SDK.java
index 05f6a93..511f23a 100644
--- a/sdk/src/main/java/net/analyse/sdk/SDK.java
+++ b/sdk/src/main/java/net/analyse/sdk/SDK.java
@@ -21,6 +21,9 @@ import java.io.IOException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 
+/**
+ * The main SDK class.
+ */
 public class SDK {
     private static final Gson GSON = new GsonBuilder()
             .setPrettyPrinting()
@@ -35,6 +38,11 @@ public class SDK {
     private final Platform platform;
     private String serverToken;
 
+    /**
+     * Create a new SDK instance.
+     * @param platform The platform
+     * @param serverToken The server token
+     */
     public SDK(Platform platform, String serverToken) {
         this.platform = platform;
         this.serverToken = serverToken;
diff --git a/sdk/src/main/java/net/analyse/sdk/exception/ServerNotFoundException.java b/sdk/src/main/java/net/analyse/sdk/exception/ServerNotFoundException.java
index 5b1cdde..8abdf5e 100644
--- a/sdk/src/main/java/net/analyse/sdk/exception/ServerNotFoundException.java
+++ b/sdk/src/main/java/net/analyse/sdk/exception/ServerNotFoundException.java
@@ -1,5 +1,8 @@
 package net.analyse.sdk.exception;
 
+/**
+ * Exception thrown when a server is not found.
+ */
 public class ServerNotFoundException extends Throwable {
     public String getMessage() {
         return "That server doesn't exist!";
diff --git a/sdk/src/main/java/net/analyse/sdk/exception/ServerNotSetupException.java b/sdk/src/main/java/net/analyse/sdk/exception/ServerNotSetupException.java
index 47b06d5..e02e3a2 100644
--- a/sdk/src/main/java/net/analyse/sdk/exception/ServerNotSetupException.java
+++ b/sdk/src/main/java/net/analyse/sdk/exception/ServerNotSetupException.java
@@ -1,5 +1,8 @@
 package net.analyse.sdk.exception;
 
+/**
+ * Exception thrown when a server is not setup.
+ */
 public class ServerNotSetupException extends Throwable {
     public String getMessage() {
         return "Analyse not setup!";
diff --git a/sdk/src/main/java/net/analyse/sdk/module/ModuleManager.java b/sdk/src/main/java/net/analyse/sdk/module/ModuleManager.java
index 922e328..9d80be8 100644
--- a/sdk/src/main/java/net/analyse/sdk/module/ModuleManager.java
+++ b/sdk/src/main/java/net/analyse/sdk/module/ModuleManager.java
@@ -10,7 +10,6 @@ import java.lang.reflect.Constructor;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.jar.JarEntry;
@@ -33,24 +32,87 @@ public class ModuleManager {
 
     /**
      * Get the loaded modules
+     *
      * @return Loaded modules
      */
     public List<PlatformModule> getModules() {
         return modules;
     }
 
+    /**
+     * Loads all platform modules.
+     *
+     * @return The list of loaded modules.
+     */
+    public List<PlatformModule> load() {
+        File moduleDir = new File(platform.getDirectory(), "modules");
+
+        if (!moduleDir.exists()) {
+            platform.debug("Creating module directory..");
+            if (!moduleDir.mkdirs()) {
+                platform.log(Level.WARNING, "Failed to create module directory!");
+                return Collections.emptyList();
+            }
+        }
+
+        if (!moduleDir.isDirectory()) {
+            platform.log(Level.WARNING, "Invalid module directory!");
+            return Collections.emptyList();
+        }
+
+        List<Class<?>> moduleClasses = getClasses();
+
+        if (moduleClasses == null) {
+            return Collections.emptyList();
+        }
+
+        List<PlatformModule> moduleList = new ArrayList<>();
+
+        for (Class<?> moduleClass : moduleClasses) {
+            try {
+                Constructor<?>[] constructors = moduleClass.getConstructors();
+                PlatformModule module = null;
+
+                if (constructors.length == 0) {
+                    module = (PlatformModule) moduleClass.newInstance();
+                } else {
+                    for (Constructor<?> constructor : constructors) {
+                        if (constructor.getParameterTypes().length == 0) {
+                            module = (PlatformModule) moduleClass.newInstance();
+                            break;
+                        }
+                    }
+                }
+
+                if (module == null) continue;
+
+                List<String> dependencies = module.getDependencies();
+                boolean allDependenciesEnabled = dependencies.stream().allMatch(platform::isPluginEnabled);
+                if (allDependenciesEnabled) {
+                    moduleList.add(module);
+                } else {
+                    String missingDependency = dependencies.stream().filter(dependency -> !platform.isPluginEnabled(dependency)).findFirst().orElse(null);
+                    if (missingDependency != null) {
+                        disable(module, String.format("Skipped %s module due to a missing dependency: %s", module.getName(), missingDependency));
+                    }
+                }
+            } catch (IllegalAccessException | InstantiationException ignored) {
+
+            }
+        }
+        return moduleList;
+    }
+
     /**
      * Scans the specified folder for jar files containing classes that implement the given target class.
      *
-     * @param folder      The folder to scan for jar files.
-     * @param targetClass The target class to look for.
      * @return The list of classes that implement the target class.
      */
-    private List<Class<?>> getClasses(String folder, Class<?> targetClass) {
+    private List<Class<?>> getClasses() {
         List<Class<?>> list = new ArrayList<>();
 
         try {
-            File f = new File(this.baseDirectory, folder);
+            File f = new File(this.baseDirectory, "modules");
             if (!f.exists()) {
                 return list;
             }
@@ -61,9 +123,9 @@ public class ModuleManager {
                 return list;
             }
 
-            ClassLoader classLoader = targetClass.getClassLoader();
+            ClassLoader classLoader = PlatformModule.class.getClassLoader();
             for (File file : jars) {
-                list = gather(file.toURI().toURL(), list, classLoader, targetClass);
+                list = gather(file.toURI().toURL(), list, classLoader);
             }
 
             return list;
@@ -80,10 +142,9 @@ public class ModuleManager {
      * @param jar         The jar file to scan.
      * @param list        The list of classes found so far.
      * @param classLoader The class loader to use.
-     * @param targetClass The target class to look for.
      * @return The updated list of classes that implement the target class.
      */
-    private List<Class<?>> gather(final URL jar, List<Class<?>> list, ClassLoader classLoader, Class<?> targetClass) {
+    private List<Class<?>> gather(final URL jar, List<Class<?>> list, ClassLoader classLoader) {
         if (list == null) {
             list = new ArrayList<>();
         }
@@ -98,7 +159,7 @@ public class ModuleManager {
                 }
 
                 String name = jarInputStreamNextJarEntry.getName();
-                if (name == null || name.isEmpty()) {
+                if (name.isEmpty()) {
                     continue;
                 }
 
@@ -107,7 +168,7 @@ public class ModuleManager {
                     String cname = name.substring(0, name.lastIndexOf(".class"));
 
                     Class<?> c = cl.loadClass(cname);
-                    if (targetClass.isAssignableFrom(c)) {
+                    if (PlatformModule.class.isAssignableFrom(c)) {
                         list.add(c);
                     }
                 }
@@ -119,68 +180,9 @@ public class ModuleManager {
         return list;
     }
 
-    /**
-     * Loads all platform modules.
-     *
-     * @return
-     */
-    public List<PlatformModule> load() {
-        File moduleDir = new File(platform.getDirectory(), "modules");
-
-        if(! moduleDir.exists()) {
-            platform.debug("Creating module directory..");
-            if(! moduleDir.mkdirs()) {
-                platform.log(Level.WARNING, "Failed to create module directory!");
-                return Collections.emptyList();
-            }
-        }
-
-        if (! moduleDir.isDirectory()) {
-            platform.log(Level.WARNING, "Invalid module directory!");
-            return Collections.emptyList();
-        }
-
-        List<Class<?>> moduleClasses = getClasses("modules", PlatformModule.class);
-
-        if(moduleClasses == null) {
-            return Collections.emptyList();
-        }
-
-        List<PlatformModule> moduleList = new ArrayList<>();
-
-        for (Class<?> moduleClass : moduleClasses) {
-            try {
-                Constructor<?>[] constructors = moduleClass.getConstructors();
-                PlatformModule module = null;
-
-                if (constructors.length == 0) {
-                    module = (PlatformModule) moduleClass.newInstance();
-                } else {
-                    for (Constructor<?> constructor : constructors) {
-                        if (constructor.getParameterTypes().length == 0) {
-                            module = (PlatformModule) moduleClass.newInstance();
-                            break;
-                        }
-                    }
-                }
-
-                if(module == null) continue;
-
-                if(module.getRequiredPlugin() != null && !platform.isPluginEnabled(module.getRequiredPlugin())) {
-                    disable(module, String.format("Skipped %s module due to a missing plugin: %s", module.getName(), module.getRequiredPlugin()));
-                    continue;
-                }
-
-                moduleList.add(module);
-            } catch (IllegalAccessException | InstantiationException ignored) {
-
-            }
-        }
-        return moduleList;
-    }
-
     /**
      * Registers a platform module manually.
+     *
      * @param module the module to register.
      */
     public void register(PlatformModule module) {
@@ -190,6 +192,7 @@ public class ModuleManager {
 
     /**
      * Unregisters a platform module manually, removing it from the plugin data.
+     *
      * @param module the module to unregister.
      */
     public void unregister(PlatformModule module) {
@@ -199,6 +202,7 @@ public class ModuleManager {
 
     /**
      * Disables a platform module, logging a warning message with the given reason and unregistering it from the plugin data.
+     *
      * @param module the module to disable.
      * @param reason the reason for disabling the module.
      */
@@ -206,4 +210,4 @@ public class ModuleManager {
         platform.log(Level.WARNING, reason);
         unregister(module);
     }
-}
+}
\ No newline at end of file
diff --git a/sdk/src/main/java/net/analyse/sdk/obj/AnalysePlayer.java b/sdk/src/main/java/net/analyse/sdk/obj/AnalysePlayer.java
index 013aca1..9c3c9ec 100644
--- a/sdk/src/main/java/net/analyse/sdk/obj/AnalysePlayer.java
+++ b/sdk/src/main/java/net/analyse/sdk/obj/AnalysePlayer.java
@@ -4,6 +4,9 @@ import net.analyse.sdk.platform.PlayerType;
 
 import java.util.*;
 
+/**
+ * The player object
+ */
 public class AnalysePlayer {
     private final String name;
     private final UUID uuid;
diff --git a/sdk/src/main/java/net/analyse/sdk/obj/PlayerEvent.java b/sdk/src/main/java/net/analyse/sdk/obj/PlayerEvent.java
index 54c2ab4..3eb0689 100644
--- a/sdk/src/main/java/net/analyse/sdk/obj/PlayerEvent.java
+++ b/sdk/src/main/java/net/analyse/sdk/obj/PlayerEvent.java
@@ -5,25 +5,80 @@ import com.google.common.collect.Maps;
 import java.util.Date;
 import java.util.Map;
 
+/**
+ * The player event object.
+ */
 public class PlayerEvent {
     private final String id;
     private final Date happenedAt;
     private final Map<String, Object> metadata;
 
+    /**
+     * Creates a new player event.
+     * @param id The id of the event (e.g. "purchase", "login", "join")
+     */
     public PlayerEvent(String id) {
         this.id = id.replace(" ", "_");
         this.happenedAt = new Date();
         this.metadata = Maps.newHashMap();
     }
 
+    /**
+     * Creates a new player event.
+     * @param id The id of the event (e.g. "purchase", "login", "join")
+     * @param happenedAt The date the event happened
+     */
     public PlayerEvent(String id, Date happenedAt) {
         this.id = id.replace(" ", "_");
         this.happenedAt = happenedAt;
         this.metadata = Maps.newHashMap();
     }
 
+    /**
+     * Adds metadata to the event.
+     * @param key The key of the metadata
+     * @param value The value of the metadata
+     * @return The event object
+     */
     public PlayerEvent withMetadata(String key, Object value) {
         this.metadata.put(key.replace(" ", "_"), value);
         return this;
     }
+
+    /**
+     * Gets the id of the event
+     * @return The id of the event
+     */
+    public String getId() {
+        return id;
+    }
+
+    /**
+     * Gets the date the event happened
+     * @return The date the event happened
+     */
+    public Date getHappenedAt() {
+        return happenedAt;
+    }
+
+    /**
+     * Gets the metadata of the event.
+     * @return The metadata of the event
+     */
+    public Map<String, Object> getMetadata() {
+        return metadata;
+    }
+
+    /**
+     * Returns a string representation of the event
+     * @return A string representation of the event
+     */
+    @Override
+    public String toString() {
+        return "PlayerEvent{" +
+                "id='" + id + '\'' +
+                ", happenedAt=" + happenedAt +
+                ", metadata=" + metadata +
+                '}';
+    }
 }
diff --git a/sdk/src/main/java/net/analyse/sdk/obj/PlayerStatistic.java b/sdk/src/main/java/net/analyse/sdk/obj/PlayerStatistic.java
index eb51303..1e91921 100644
--- a/sdk/src/main/java/net/analyse/sdk/obj/PlayerStatistic.java
+++ b/sdk/src/main/java/net/analyse/sdk/obj/PlayerStatistic.java
@@ -1,19 +1,41 @@
 package net.analyse.sdk.obj;
 
 public class PlayerStatistic {
-    private String key;
-    private Object value;
+    private final String key;
+    private final Object value;
 
+    /**
+     * Creates a new PlayerStatistic
+     * @param key The key of the statistic
+     * @param value The value of the statistic
+     */
     public PlayerStatistic(String key, Object value) {
         this.key = key;
         this.value = value;
     }
 
+    /**
+     * Returns the key of the statistic
+     * @return The key of the statistic
+     */
     public String getKey() {
         return key;
     }
 
+    /**
+     * Returns the value of the statistic
+     * @return The value of the statistic
+     */
     public Object getValue() {
         return value;
     }
-}
+
+    /**
+     * Returns a string representation of the statistic
+     * @return A string representation of the statistic
+     */
+    @Override
+    public String toString() {
+        return "PlayerStatistic{" + "key=" + key + ", value=" + value + '}';
+    }
+}
\ No newline at end of file
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/Platform.java b/sdk/src/main/java/net/analyse/sdk/platform/Platform.java
index 903a064..93f0874 100644
--- a/sdk/src/main/java/net/analyse/sdk/platform/Platform.java
+++ b/sdk/src/main/java/net/analyse/sdk/platform/Platform.java
@@ -22,8 +22,8 @@ public interface Platform {
 
     /**
      * Get a player
-     * @param uuid
-     * @return
+     * @param uuid The UUID of the player
+     * @return The player
      */
     AnalysePlayer getPlayer(UUID uuid);
 
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/PlatformConfig.java b/sdk/src/main/java/net/analyse/sdk/platform/PlatformConfig.java
index 5d7d4de..59e4e25 100644
--- a/sdk/src/main/java/net/analyse/sdk/platform/PlatformConfig.java
+++ b/sdk/src/main/java/net/analyse/sdk/platform/PlatformConfig.java
@@ -5,6 +5,9 @@ import dev.dejvokep.boostedyaml.YamlDocument;
 import java.util.List;
 import java.util.UUID;
 
+/**
+ * Represents the configuration of the platform.
+ */
 public class PlatformConfig {
     private final int configVersion;
 
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/PlatformModule.java b/sdk/src/main/java/net/analyse/sdk/platform/PlatformModule.java
index bdc3c34..ca6f99a 100644
--- a/sdk/src/main/java/net/analyse/sdk/platform/PlatformModule.java
+++ b/sdk/src/main/java/net/analyse/sdk/platform/PlatformModule.java
@@ -1,18 +1,91 @@
 package net.analyse.sdk.platform;
 
 import net.analyse.sdk.Analyse;
-import net.analyse.sdk.platform.Platform;
+import net.analyse.sdk.platform.command.PlatformCommand;
+import org.jetbrains.annotations.NotNull;
 
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents a module of the platform.
+ *
+ * @author Analyse
+ * @version 2.0.0
+ */
 public abstract class PlatformModule {
+    private final Map<String, PlatformCommand> commands = new LinkedHashMap<>();
+
+    /**
+     * Returns the name of this module.
+     * @return The name of this module.
+     */
     public abstract String getName();
+
+    /**
+     * Registers the module.
+     */
     public abstract void onEnable();
+
+    /**
+     * Unregisters the module.
+     */
     public abstract void onDisable();
 
+    /**
+     * Returns a list of all dependencies of this module.
+     * @return A list of all dependencies of this module.
+     */
+    @NotNull
+    public abstract List<String> getDependencies();
+
+    /**
+     * Returns the platform of this module.
+     * @return The platform of this module.
+     */
     public Platform getPlatform() {
         return Analyse.get();
     }
 
-    public String getRequiredPlugin() {
-        return null;
+    /**
+     * Registers a command to this module.
+     * @param command The command to register.
+     */
+    public void registerCommand(PlatformCommand command) {
+
+        // Check if the command is already registered
+        if (commands.containsKey(command.getName())) {
+            throw new IllegalArgumentException(String.format("Module %s already has a command with the name %s", getName(), command.getName()));
+        }
+
+        // Register the command
+        commands.put(command.getName(), command);
+    }
+
+    /**
+     * Executes a command registered by this module.
+     * @param commandName The name of the command to execute.
+     * @param platformCommandSender The sender of the command.
+     * @param commandArguments The arguments of the command.
+     */
+    public void executeCommand(String commandName, Object platformCommandSender, String[] commandArguments) {
+        PlatformCommand command = commands.get(commandName);
+
+        // Check if the command is registered
+        if (command != null) {
+            command.execute(platformCommandSender, commandArguments);
+        } else {
+            throw new IllegalArgumentException(String.format("Module %s does not have a command with the name %s", getName(), commandName));
+        }
+    }
+
+    /**
+     * Returns a list of all commands registered by this module.
+     * @return A list of all commands registered by this module.
+     */
+    public List<PlatformCommand> getCommands() {
+        return new ArrayList<>(commands.values());
     }
-}
+}
\ No newline at end of file
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/PlatformTelemetry.java b/sdk/src/main/java/net/analyse/sdk/platform/PlatformTelemetry.java
index 628c06e..d026cb1 100644
--- a/sdk/src/main/java/net/analyse/sdk/platform/PlatformTelemetry.java
+++ b/sdk/src/main/java/net/analyse/sdk/platform/PlatformTelemetry.java
@@ -8,6 +8,15 @@ public class PlatformTelemetry {
     private final String systemArch;
     private final boolean onlineMode;
 
+    /**
+     * Creates a new platform telemetry instance.
+     * @param pluginVersion The version of the plugin.
+     * @param serverSoftware The software of the server.
+     * @param serverVersion The version of the server.
+     * @param javaVersion The version of the java runtime.
+     * @param systemArch The architecture of the system.
+     * @param onlineMode Whether the server is in online mode.
+     */
     public PlatformTelemetry(String pluginVersion, String serverSoftware, String serverVersion, String javaVersion, String systemArch, boolean onlineMode) {
         this.pluginVersion = pluginVersion;
         this.serverSoftware = serverSoftware;
@@ -41,6 +50,10 @@ public class PlatformTelemetry {
         return onlineMode;
     }
 
+    /**
+     * Returns a string representation of this object.
+     * @return A string representation of this object.
+     */
     @Override
     public String toString() {
         return "PlatformTelemetry{" +
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/PlatformType.java b/sdk/src/main/java/net/analyse/sdk/platform/PlatformType.java
index a4aa423..6772741 100644
--- a/sdk/src/main/java/net/analyse/sdk/platform/PlatformType.java
+++ b/sdk/src/main/java/net/analyse/sdk/platform/PlatformType.java
@@ -1,5 +1,8 @@
 package net.analyse.sdk.platform;
 
+/**
+ * The platform type.
+ */
 public enum PlatformType {
     BUKKIT,
     BUNGEECORD,
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/PlayerType.java b/sdk/src/main/java/net/analyse/sdk/platform/PlayerType.java
index 178134e..051cbee 100644
--- a/sdk/src/main/java/net/analyse/sdk/platform/PlayerType.java
+++ b/sdk/src/main/java/net/analyse/sdk/platform/PlayerType.java
@@ -1,5 +1,8 @@
 package net.analyse.sdk.platform;
 
+/**
+ * The type of player.
+ */
 public enum PlayerType {
     JAVA,
     BEDROCK
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommand.java b/sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommand.java
new file mode 100644
index 0000000..fca23bd
--- /dev/null
+++ b/sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommand.java
@@ -0,0 +1,53 @@
+package net.analyse.sdk.platform.command;
+
+import java.util.function.Consumer;
+
+/**
+ * Represents a command of the platform.
+ */
+public class PlatformCommand {
+    private final String name;
+    private final String description;
+    private final Consumer<PlatformCommandContext> commandExecutor;
+
+    /**
+     * Creates a new platform command.
+     *
+     * @param name            The name of the command.
+     * @param description     The description of the command.
+     * @param commandExecutor The command consumer.
+     */
+    public PlatformCommand(String name, String description, Consumer<PlatformCommandContext> commandExecutor) {
+        this.name = name;
+        this.description = description;
+        this.commandExecutor = commandExecutor;
+    }
+
+    /**
+     * Returns the name of the command.
+     *
+     * @return The name of the command.
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Returns the description of the command.
+     *
+     * @return The description of the command.
+     */
+    public String getDescription() {
+        return description;
+    }
+
+    /**
+     * Executes the command consumer with the given arguments.
+     *
+     * @param sender           The sender of the command.
+     * @param commandArguments The arguments of the command.
+     */
+    public void execute(Object sender, String[] commandArguments) {
+        commandExecutor.accept(new PlatformCommandContext(sender, commandArguments));
+    }
+}
\ No newline at end of file
diff --git a/sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommandContext.java b/sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommandContext.java
new file mode 100644
index 0000000..c0609f1
--- /dev/null
+++ b/sdk/src/main/java/net/analyse/sdk/platform/command/PlatformCommandContext.java
@@ -0,0 +1,35 @@
+package net.analyse.sdk.platform.command;
+
+/**
+ * Represents the context of a command.
+ */
+public class PlatformCommandContext {
+    private final Object sender;
+    private final String[] commandArguments;
+
+    /**
+     * Creates a new PlatformCommandContext.
+     * @param sender The sender of the command.
+     * @param commandArguments The arguments of the command.
+     */
+    public PlatformCommandContext(Object sender, String[] commandArguments) {
+        this.sender = sender;
+        this.commandArguments = commandArguments;
+    }
+
+    /**
+     * Returns the sender of the command.
+     * @return The sender of the command.
+     */
+    public Object getSender() {
+        return sender;
+    }
+
+    /**
+     * Returns the arguments of the command.
+     * @return The arguments of the command.
+     */
+    public String[] getArguments() {
+        return commandArguments;
+    }
+}
\ No newline at end of file
diff --git a/sdk/src/main/java/net/analyse/sdk/request/AnalyseRequest.java b/sdk/src/main/java/net/analyse/sdk/request/AnalyseRequest.java
index ae20a66..040ad8f 100644
--- a/sdk/src/main/java/net/analyse/sdk/request/AnalyseRequest.java
+++ b/sdk/src/main/java/net/analyse/sdk/request/AnalyseRequest.java
@@ -9,39 +9,76 @@ import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
+/**
+ * A request to the Analyse API.
+ */
 public class AnalyseRequest {
     private static final ExecutorService EXECUTOR = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat("analyse-#%1$d").build());
 
     private final Request.Builder request;
     private final OkHttpClient client;
 
+    /**
+     * Create a new request.
+     * @param endpoint The endpoint to send the request to.
+     * @param client The client to use.
+     */
     public AnalyseRequest(String endpoint, OkHttpClient client) {
         this.request = new Request.Builder().url(endpoint);
         this.client = client;
     }
 
+    /**
+     * Add a header to the request.
+     * @param key The header key.
+     * @param value The header value.
+     * @return The request.
+     */
     public AnalyseRequest withHeader(String key, String value) {
         request.addHeader(key, value);
         return this;
     }
 
+    /**
+     * Add a body to the request.
+     * @param body The body.
+     * @return The request.
+     */
     public AnalyseRequest withBody(String body) {
         request.post(RequestBody.create(body, MediaType.get("application/json; charset=utf-8")));
         return this;
     }
 
+    /**
+     * Add a server token to the request.
+     * @param token The server token.
+     * @return The request.
+     */
     public AnalyseRequest withServerToken(String token) {
         return withHeader("X-SERVER-TOKEN", token);
     }
 
+    /**
+     * Build the request.
+     * @return The request.
+     */
     public Call build() {
         return client.newCall(request.build());
     }
 
+    /**
+     * Send the request synchronously.
+     * @return The response.
+     * @throws IOException If an error occurs while sending the request.
+     */
     public Response send() throws IOException {
         return build().execute();
     }
 
+    /**
+     * Send the request asynchronously.
+     * @return A future that will be completed with the response.
+     */
     public CompletableFuture<Response> sendAsync() {
         CompletableFuture<Response> future = new CompletableFuture<>();
 
diff --git a/sdk/src/main/java/net/analyse/sdk/request/exception/AnalyseException.java b/sdk/src/main/java/net/analyse/sdk/request/exception/AnalyseException.java
deleted file mode 100644
index 8b85d43..0000000
--- a/sdk/src/main/java/net/analyse/sdk/request/exception/AnalyseException.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.analyse.sdk.request.exception;
-
-public class AnalyseException extends Throwable {
-    private final String message;
-
-    public AnalyseException(String message) {
-        this.message = message;
-    }
-
-    public String getMessage() {
-        return message;
-    }
-}
diff --git a/sdk/src/main/java/net/analyse/sdk/request/response/PluginInformation.java b/sdk/src/main/java/net/analyse/sdk/request/response/PluginInformation.java
index 52c49fb..17b14cc 100644
--- a/sdk/src/main/java/net/analyse/sdk/request/response/PluginInformation.java
+++ b/sdk/src/main/java/net/analyse/sdk/request/response/PluginInformation.java
@@ -1,5 +1,8 @@
 package net.analyse.sdk.request.response;
 
+/**
+ * Represents the platform plugin information.
+ */
 public class PluginInformation {
     private final String versionName;
     private final Integer versionNumber;
diff --git a/sdk/src/main/java/net/analyse/sdk/request/response/ServerInformation.java b/sdk/src/main/java/net/analyse/sdk/request/response/ServerInformation.java
index 9b94385..088df10 100644
--- a/sdk/src/main/java/net/analyse/sdk/request/response/ServerInformation.java
+++ b/sdk/src/main/java/net/analyse/sdk/request/response/ServerInformation.java
@@ -3,6 +3,9 @@ package net.analyse.sdk.request.response;
 import java.util.Date;
 import java.util.UUID;
 
+/**
+ * Represents the information of a server.
+ */
 public class ServerInformation {
     private final String name;
     private final UUID uuid;
diff --git a/sdk/src/main/java/net/analyse/sdk/util/MapperUtil.java b/sdk/src/main/java/net/analyse/sdk/util/MapperUtil.java
index aa473f0..7144589 100644
--- a/sdk/src/main/java/net/analyse/sdk/util/MapperUtil.java
+++ b/sdk/src/main/java/net/analyse/sdk/util/MapperUtil.java
@@ -3,6 +3,11 @@ package net.analyse.sdk.util;
 import java.net.InetSocketAddress;
 
 public class MapperUtil {
+    /**
+     * Maps a virtual domain to a player name.
+     * @param virtualDomain The virtual domain to map.
+     * @return The player name.
+     */
     public static String mapVirtualDomainToPlayer(InetSocketAddress virtualDomain) {
         if (virtualDomain == null) return null;
 
diff --git a/sdk/src/main/java/net/analyse/sdk/util/ResourceUtil.java b/sdk/src/main/java/net/analyse/sdk/util/ResourceUtil.java
index d762fed..838e518 100644
--- a/sdk/src/main/java/net/analyse/sdk/util/ResourceUtil.java
+++ b/sdk/src/main/java/net/analyse/sdk/util/ResourceUtil.java
@@ -9,6 +9,9 @@ import java.io.InputStream;
 import java.nio.file.Files;
 import java.util.logging.Level;
 
+/**
+ * Utility class for extracting resources from the jar file.
+ */
 public final class ResourceUtil {
     private ResourceUtil() {
         throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
diff --git a/sdk/src/main/java/net/analyse/sdk/util/StringUtil.java b/sdk/src/main/java/net/analyse/sdk/util/StringUtil.java
index a20be15..73ec4e4 100644
--- a/sdk/src/main/java/net/analyse/sdk/util/StringUtil.java
+++ b/sdk/src/main/java/net/analyse/sdk/util/StringUtil.java
@@ -1,6 +1,16 @@
 package net.analyse.sdk.util;
 
+/**
+ * String utility methods.
+ */
 public class StringUtil {
+    /**
+     * Pluralise a string based on a count.
+     * @param count The count to base the pluralisation on.
+     * @param singular The singular form of the string.
+     * @param plural The plural form of the string.
+     * @return The singular or plural form of the string.
+     */
     public static String pluralise(int count, String singular, String plural) {
         return count == 1 ? singular : plural;
     }
diff --git a/sdk/src/main/java/net/analyse/sdk/util/VersionUtil.java b/sdk/src/main/java/net/analyse/sdk/util/VersionUtil.java
index f7045b9..9d42ff8 100644
--- a/sdk/src/main/java/net/analyse/sdk/util/VersionUtil.java
+++ b/sdk/src/main/java/net/analyse/sdk/util/VersionUtil.java
@@ -1,5 +1,9 @@
 package net.analyse.sdk.util;
 
+
+/**
+ * Utility class for version comparison.
+ */
 public class VersionUtil {
     public static boolean isNewerVersion(String currentVersion, String newVersion) {
         String[] currentVersionArray = currentVersion.split("\\.");
-- 
2.37.1 (Apple Git-137.1)

